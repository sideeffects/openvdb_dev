
# This workflow is for running various sanitizers on OpenVDB. We currently
# only use clang over gcc (for no particular reason). Note that some of the
# errors produces by these sanitizers may be fairly obscure as the
# llvm-symbolizer is not installed on the openvdb image. The address
# sanitizer should never fail.

name: Sanitizers

on:
  schedule:
    # run this workflow every Monday 00:00 UTC
    - cron:  '0 0 * * 1'

jobs:
  linux-vfx:
    runs-on: ubuntu-latest
    name: linux-clang-sanitizer:${{ matrix.config.build }}
    container:
      image: aswf/ci-openvdb:2021
    env:
      CXX: clang++
    strategy:
      matrix:
        config:
          - { build: 'asan',  cmake: '-DUSE_BLOSC=OFF' } # We never called blosc_destroy(), so disable blosc to silence these errors
          - { build: 'ubsan', cmake: '' } # Currently doesn't error, just reports all issues
          #- { build: 'lsan', cmake: '' } # asan encompasses and includes lsan
          #- { build: 'tsan', cmake: '' } # requires full stack rebuild for valid results (including libc++)
          #- { build: 'msan', cmake: '' } # requires full stack rebuild for valid results (including libc++)
          #- { build: 'coverage', cmake: '' } # todo
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: install_gtest
      run: ./ci/install_gtest.sh 1.8.0
    - name: build
      run: >
        ./ci/build.sh -v
        --build-type=${{ matrix.config.build }}
        --components="core,axcore,test,axtest"
        --cargs=\"-DOPENVDB_CXX_STRICT=ON -DOPENVDB_CORE_STATIC=OFF -DOPENVDB_AX_STATIC=OFF ${{ matrix.config.cmake }}\"
    - name: test
      run: cd build && ctest -V
