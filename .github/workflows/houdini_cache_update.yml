
name: Houdini Cache

on:
  schedule:
    # run this workflow every sunday at noon UTC
    - cron:  '0 12 * * 0'
  workflow_dispatch:

# download the latest production version of Houdini, strip out headers,
# libraries and binaries required for building OpenVDB and if the build
# succeeds, put it into the GitHub Actions cache

jobs:
  checksecret:
    # Check that valid github secrets have been set for the ability to
    # download Houdini and cache it. The secrets are used in download_houdini.py
    name: Verify Houdini Secrets
    runs-on: ubuntu-latest
    outputs:
      HOUDINI_SECRETS: ${{ steps.check.outputs.HOUDINI_SECRETS }}
    steps:
      - id: check
        env:
            HOUDINI_CLIENT_ID: ${{ secrets.HOUDINI_CLIENT_ID }}
            HOUDINI_SECRET_KEY: ${{ secrets.HOUDINI_SECRET_KEY }}
        run: echo "::set-output name=HOUDINI_SECRETS::${{ env.HOUDINI_CLIENT_ID != '' && env.HOUDINI_SECRET_KEY != '' }}"
      - name: Skip Next Jobs
        if: steps.check.outputs.HOUDINI_SECRETS != 'true'
        run: echo "HOUDINI_CLIENT_ID and HOUDINI_SECRET_KEY GitHub Action Secrets needs to be set to install Houdini builds"

  houdini18_5:
    needs: [checksecret]
    if: >
      ${{ needs.checksecret.outputs.HOUDINI_SECRETS == 'true' ||
          github.repository_owner == 'AcademySoftwareFoundation' }}
    runs-on: ubuntu-latest
    env:
      CXX: clang++
      HOUDINI_CLIENT_ID: ${{ secrets.HOUDINI_CLIENT_ID }}
      HOUDINI_SECRET_KEY: ${{ secrets.HOUDINI_SECRET_KEY }}
    container:
      image: aswf/ci-base:2020
    steps:
    - uses: actions/checkout@v2
    - name: download_houdini
      run: ./ci/download_houdini.sh 18.5 ON
    - name: install_houdini
      run: |
        mkdir houdini_install
        cp hou/hou.tar.gz houdini_install/hou.tar.gz
        cd houdini_install && tar -xzf hou.tar.gz && cd -
    - name: install_gtest
      run: ./ci/install_gtest.sh 1.10.0
    - name: build
      shell: bash
      run: >
        cd houdini_install/hou && source houdini_setup_bash && cd - &&
        ./ci/build.sh -v
        --build-type=Release
        --components="core,hou,bin,python,test,axcore,axbin,axtest"
        --cargs=\"-DOPENVDB_BUILD_HOUDINI_ABITESTS=ON -DOPENVDB_HOUDINI_INSTALL_PREFIX=/tmp\"
    - name: test
      run: cd build && ctest -V
    - name: write_houdini_cache
      uses: actions/cache@v2
      with:
        path: hou
        key: vdb-v3-houdini18_5-${{ hashFiles('hou/hou.tar.gz') }}

  houdini18_0:
    needs: [checksecret]
    if: >
      ${{ needs.checksecret.outputs.HOUDINI_SECRETS == 'true' ||
          github.repository_owner == 'AcademySoftwareFoundation' }}
    runs-on: ubuntu-latest
    env:
      CXX: clang++
      HOUDINI_CLIENT_ID: ${{ secrets.HOUDINI_CLIENT_ID }}
      HOUDINI_SECRET_KEY: ${{ secrets.HOUDINI_SECRET_KEY }}
    container:
      image: aswf/ci-base:2019
    steps:
    - uses: actions/checkout@v2
    - name: download_houdini
      run: ./ci/download_houdini.sh 18.0 ON
    - name: install_houdini
      run: |
        mkdir houdini_install
        cp hou/hou.tar.gz houdini_install/hou.tar.gz
        cd houdini_install && tar -xzf hou.tar.gz && cd -
    - name: install_gtest
      run: ./ci/install_gtest.sh 1.10.0
    - name: build
      shell: bash
      run: >
        cd houdini_install/hou && source houdini_setup_bash && cd - &&
        ./ci/build.sh -v
        --build-type=Release
        --components="core,hou,bin,python,test,axcore,axbin,axtest"
        --cargs=\"-DOPENVDB_BUILD_HOUDINI_ABITESTS=ON -DOPENVDB_HOUDINI_INSTALL_PREFIX=/tmp\"
    - name: test
      run: cd build && ctest -V
    - name: write_houdini_cache
      uses: actions/cache@v2
      with:
        path: hou
        key: vdb-v3-houdini18_0-${{ hashFiles('hou/hou.tar.gz') }}
